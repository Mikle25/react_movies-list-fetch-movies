{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","api/api.js","components/FindMovie/FindMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","key","imdbId","getMovie","a","fetch","response","json","FindMovie","addMovie","useState","movieTitle","updateMovieTitle","loadMovie","createMovie","error","toggleError","preview","setPreview","findMovie","Response","Title","Plot","Poster","imdbID","onSubmit","e","preventDefault","handleSubmit","autoComplete","htmlFor","type","id","placeholder","classes","value","onChange","target","onClick","App","data","updateMovies","movieFromServer","find","ReactDOM","render","document","getElementById"],"mappings":"mxEAIaA,G,kBAAY,SAAC,GAAD,IACvBC,EADuB,EACvBA,MADuB,IAEvBC,mBAFuB,MAET,GAFS,EAGvBC,EAHuB,EAGvBA,OACAC,EAJuB,EAIvBA,QAJuB,OAMvB,yBAAKC,UAAU,QACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,iBAChB,yBACEC,IAAKH,EACLI,IAAI,gBAIV,yBAAKF,UAAU,gBACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,cACb,4BAAQA,UAAU,kBAChB,yBACEC,IAAI,wBACJC,IAAI,WAIV,yBAAKF,UAAU,iBACb,uBAAGA,UAAU,cAAcJ,KAI/B,yBAAKI,UAAU,WACZH,EACD,6BACA,uBAAGM,KAAMJ,GAAT,aC/BKK,EAAa,SAAC,GAAD,QACxBC,cADwB,MACf,GADe,SAGxB,yBAAKL,UAAU,UACZK,EAAOC,KAAI,SAAAC,GAAK,OACf,kBAAC,EAAD,eAAWC,IAAKD,EAAME,QAAYF,S,uCCT3BG,G,MAAQ,uCAAG,WAAMd,GAAN,eAAAe,EAAA,sEACCC,MAAM,GAAD,OAHd,+CAGc,OAAchB,IADpB,cAChBiB,EADgB,yBAGfA,EAASC,QAHM,2CAAH,uDCMRC,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EACFC,mBAAS,IADP,mBAClCC,EADkC,KACtBC,EADsB,OAERF,mBAAS,MAFD,mBAElCG,EAFkC,KAEvBC,EAFuB,OAGZJ,oBAAS,GAHG,mBAGlCK,EAHkC,KAG3BC,EAH2B,OAIXN,oBAAS,GAJE,mBAIlCO,EAJkC,KAIzBC,EAJyB,KAMnCC,EAAS,uCAAG,4BAAAf,EAAA,sEACID,EAASQ,GADb,UAGO,WAFjBX,EADU,QAGNoB,SAHM,uBAIdJ,GAAY,GACZE,GAAW,GALG,0BAUhBJ,EAAY,CACVzB,MAAOW,EAAMqB,MACb/B,YAAaU,EAAMsB,KACnB/B,OAAQS,EAAMuB,OACd/B,QAAQ,8BAAD,OAAgCQ,EAAMwB,OAAtC,KACPtB,OAAQF,EAAMwB,SAGhBR,GAAY,GACZE,GAAW,GAnBK,4CAAH,qDAoCf,OACE,oCACE,0BACEzB,UAAU,aACVgC,SAAU,SAAAC,GAAC,OAlBI,SAACA,GACpBA,EAAEC,iBACEhB,IACFQ,EAAUR,GACVC,EAAiB,KAcAgB,CAAaF,IAC5BG,aAAa,OAEb,yBAAKpC,UAAU,SACb,2BAAOA,UAAU,QAAQqC,QAAQ,eAAjC,eAIA,yBAAKrC,UAAU,WACb,2BACEsC,KAAK,OACLC,GAAG,cACHC,YAAY,0BACZxC,UAAWyC,IAAQ,QAAS,CAAE,YAAanB,IAC3Cc,aAAa,MACbM,MAAOxB,EACPyB,SA1BS,SAACV,GACpBd,EAAiBc,EAAEW,OAAOF,OAE1BnB,GAAY,OA2BLD,GACC,uBAAGtB,UAAU,kBAAb,yCAMJ,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,WACb,4BACEsC,KAAK,SACLtC,UAAU,mBAFZ,iBAQF,yBAAKA,UAAU,WACb,4BACEsC,KAAK,SACLtC,UAAU,oBACV6C,QAAS,WACP7B,EAASI,GACTK,GAAW,KALf,sBAcLD,GACC,yBAAKxB,UAAU,aACb,wBAAIA,UAAU,SAAd,WACA,kBAAC,EAAcoB,M,OCvGZ0B,EAAM,WAAO,IAAD,EACQ7B,mBAAS8B,GADjB,mBAChB1C,EADgB,KACR2C,EADQ,KAkBvB,OACE,yBAAKhD,UAAU,QACb,yBAAKA,UAAU,gBACb,kBAAC,EAAD,CAAYK,OAAQA,KAEtB,yBAAKL,UAAU,WACb,kBAAC,EAAD,CAAWgB,SArBA,SAACiC,GACC5C,EAAO6C,MAAK,SAAA3C,GAAK,OAChCA,EAAME,SAAWwC,EAAgBxC,WAOnCuC,EAAa,GAAD,mBACP3C,GADO,CAEV4C,WCfNE,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.4d8b40b9.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({\n  title,\n  description = '',\n  imgUrl,\n  imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","const ApiOMDb = 'https://www.omdbapi.com/?apikey=fc75dfe8&t=';\n\nexport const getMovie = async(title) => {\n  const response = await fetch(`${ApiOMDb}${title}`);\n\n  return response.json();\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport classes from 'classnames';\nimport './FindMovie.scss';\n\nimport { getMovie } from '../../api/api';\nimport { MovieCard } from '../MovieCard';\n\nexport const FindMovie = ({ addMovie }) => {\n  const [movieTitle, updateMovieTitle] = useState('');\n  const [loadMovie, createMovie] = useState(null);\n  const [error, toggleError] = useState(false);\n  const [preview, setPreview] = useState(false);\n\n  const findMovie = async() => {\n    const movie = await getMovie(movieTitle);\n\n    if (movie.Response === 'False') {\n      toggleError(true);\n      setPreview(false);\n\n      return;\n    }\n\n    createMovie({\n      title: movie.Title,\n      description: movie.Plot,\n      imgUrl: movie.Poster,\n      imdbUrl: `https://www.imdb.com/title/${movie.imdbID}/`,\n      imdbId: movie.imdbID,\n    });\n\n    toggleError(false);\n    setPreview(true);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (movieTitle) {\n      findMovie(movieTitle);\n      updateMovieTitle('');\n    }\n  };\n\n  const handleChange = (e) => {\n    updateMovieTitle(e.target.value);\n\n    toggleError(false);\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={e => handleSubmit(e)}\n        autoComplete=\"off\"\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classes('input', { 'is-danger': error })}\n              autoComplete=\"off\"\n              value={movieTitle}\n              onChange={handleChange}\n            />\n          </div>\n\n          {error && (\n            <p className=\"help is-danger\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              className=\"button is-light\"\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              onClick={() => {\n                addMovie(loadMovie);\n                setPreview(false);\n              }}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      {preview && (\n        <div className=\"container\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard {...loadMovie} />\n        </div>\n      )}\n\n    </>\n  );\n};\n\nFindMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\n\nexport const App = () => {\n  const [movies, updateMovies] = useState(data);\n\n  const addMovie = (movieFromServer) => {\n    const newMovie = movies.find(movie => (\n      movie.imdbId === movieFromServer.imdbId\n    ));\n\n    if (newMovie) {\n      return;\n    }\n\n    updateMovies([\n      ...movies,\n      movieFromServer,\n    ]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie addMovie={addMovie} />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}